import asyncio
import time

from aiogram import types
from aiogram.dispatcher import FSMContext

from loader import dp, bot
from keyboards import main_menu, admin_menu
from functions import user_func, admin_func
from filters import *
from states import *


@dp.message_handler(IsAdmin(), commands=['admin'], state='*')
async def handler_admin_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", reply_markup=admin_menu.main_menu)


@dp.callback_query_handler(state='*', regexp=r"^admin_menu$")
async def handler_call_admin_menu(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", reply_markup=admin_menu.main_menu)


@dp.callback_query_handler(state='*', regexp=r"^admin_stats$")
async def handler_call_admin_stats(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    text = admin_func.admin_stats()
    if call.message.html_text not in text:
        await call.message.edit_text(text, reply_markup=admin_menu.main_menu)


@dp.callback_query_handler(state='*', regexp=r"^admin_mail$")
async def handler_call_admin_mail(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await Email.message_id.set()
    await call.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–∏—Ñ)",
                                 reply_markup=main_menu.back("admin_menu"))


@dp.message_handler(IsAdmin(), state=Email.message_id, content_types=['text', 'photo', 'video', 'gif', 'animation'])
async def handler_admin_mail_message_id(message: types.Message, state: FSMContext):
    message_id = message.message_id
    await state.update_data(message_id=message_id)
    await Email.next()
    await bot.copy_message(message.from_user.id, message.from_user.id, message_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ + –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")


@dp.message_handler(state=Email.confirm)
async def handler_admin_mail_confirm(message: types.Message, state: FSMContext):
    if message.text == '+':
        async with state.proxy() as data:
            message_id = data['message_id']
        await state.finish()
        asyncio.create_task(send_email(message, message_id))
    else:
        await state.finish()
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


async def send_email(message, message_id):
    users = user_func.all_users()
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    time_start = time.time()
    true_send = 0
    for user_id, in users:
        try:
            await bot.copy_message(user_id, message.from_user.id, message_id)
            true_send += 1
            await asyncio.sleep(0.05)
        except:
            pass
    text = f"""
‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {true_send}
üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(users) - true_send}
üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {int(time.time() - time_start)} —Å–µ–∫—É–Ω–¥
"""
    await message.answer(text)

